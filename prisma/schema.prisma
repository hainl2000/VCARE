// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum roles {
  user
  admin
  doctor
  hospital
}

model users {
  id                       Int                        @id @default(autoincrement())
  phone                    String                     @unique
  email                    String                     @unique
  password                 String
  full_name                String?
  avatar                   String?
  gender                   Boolean? //true-male, false-female
  dob                      DateTime?
  deleted                  Boolean                    @default(false)
  address                  String?
  identity_number          String?                    @unique
  social_insurance_number  String?                    @unique
  external_code            String                     @unique @default(dbgenerated("nanoid()")) @db.VarChar()
  security_key             String?
  otp_data                 Json?                      @default("{}") @db.JsonB
  created_at               DateTime                   @default(now())
  deleted_at               DateTime?
  health_status            Json?                      @default("{}") @db.JsonB
  updated_at               DateTime                   @updatedAt
  change_history           Json                       @default("[]") @db.JsonB
  health_check_appointment health_check_appointment[]
  wallet                   wallet?
}

model wallet {
  id      String               @id @default(dbgenerated("nanoid()")) @db.VarChar()
  user_id Int                  @unique
  remain  Float                @default(5000000)
  version Int?
  user    users                @relation(fields: [user_id], references: [id])
  log     wallet_transaction[]
}

model wallet_transaction {
  id        Int                      @id @default(autoincrement())
  amount    Float
  note      String?
  ref_id    Int                      @unique
  ref       health_check_appointment @relation(fields: [ref_id], references: [id])
  wallet_id String?                  @db.VarChar()
  wallet    wallet?                  @relation(fields: [wallet_id], references: [id])
}

model health_history {
  id        Int      @id @default(autoincrement())
  status    Json?    @default("{}") @db.JsonB
  update_by Int
  role      roles
  update_at DateTime @default(now())
}

model doctors {
  id                          Int                        @id @default(autoincrement())
  hospital_id                 Int
  department_id               Int?
  service_id                  Int?
  practicing_certificate_code String?                    @unique
  code                        String?                    @unique
  full_name                   String?
  email                       String                     @unique
  phone                       String                     @unique
  password                    String
  avatar                      String?
  gender                      Boolean?
  role_id                     Int?
  deleted                     Boolean                    @default(false)
  created_at                  DateTime                   @default(now())
  updated_at                  DateTime                   @updatedAt
  deleted_at                  DateTime?
  external_code               String                     @unique @default(dbgenerated("nanoid()")) @db.VarChar()
  change_history              Json                       @default("[]") @db.JsonB
  security_key                String?
  hospital                    hospitals                  @relation(fields: [hospital_id], references: [id])
  department                  hospital_department?       @relation(fields: [department_id], references: [id])
  drole                       doctor_roles?              @relation(fields: [role_id], references: [id])
  service                     hospital_services?         @relation(fields: [service_id], references: [id])
  health_check_appointment    health_check_appointment[]
  use_service                 use_service[]
}

model hospital_services {
  id          Int                @id @default(autoincrement())
  hospital    hospitals          @relation(fields: [hospital_id], references: [id])
  hospital_id Int
  name        String
  doctors     doctors[]
  services    medical_services[]

  @@unique([name, hospital_id])
}

model medical_services {
  id          Int               @id @default(autoincrement())
  service     hospital_services @relation(fields: [service_id], references: [id])
  service_id  Int
  name        String
  fee         Float?
  room        String?
  use_service use_service[]
}

model admins {
  id           Int         @id @default(autoincrement())
  email        String      @unique
  password     String
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  security_key String?
  hospitals    hospitals[]
}

model hospital_department {
  id                       Int                        @id @default(autoincrement())
  name                     String
  hospital_id              Int
  hospital                 hospitals                  @relation(fields: [hospital_id], references: [id])
  doctors                  doctors[]
  health_check_appointment health_check_appointment[]
  time_per_turn            Int                        @default(15)
  start_order              Int                        @default(1)

  @@unique([name, hospital_id])
}

model doctor_roles {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  doctors doctors[]
}

model hospitals {
  id                       Int                        @id @default(autoincrement())
  name                     String                     @unique
  address                  String
  image                    String?
  information              String?
  email                    String                     @unique
  phone                    String                     @unique
  password                 String
  security_key             String?
  created_by_id            Int
  created_at               DateTime                   @default(now())
  work_time                Json?                      @default("[]") @db.JsonB
  doctors                  doctors[]
  change_history           Json                       @default("[]") @db.JsonB
  created_by               admins                     @relation(fields: [created_by_id], references: [id])
  hospital_department      hospital_department[]
  health_check_appointment health_check_appointment[]
  hospital_service         hospital_services[]
}

model health_check_appointment {
  id                  Int                 @id @default(autoincrement())
  hospital_id         Int
  department_id       Int
  user_id             Int
  doctor_id           Int?
  external_code       String?             @unique
  order               Int                 @default(-1)
  patient_information Json?               @db.JsonB
  medical_condition   String
  time_in_string      String
  finished            Boolean             @default(false)
  conclude            String?
  note                String?
  medicine            String?
  fee                 Float?
  fee_paid            Boolean             @default(false)
  user                users               @relation(fields: [user_id], references: [id])
  doctor              doctors?            @relation(fields: [doctor_id], references: [id])
  hospital            hospitals           @relation(fields: [hospital_id], references: [id])
  department          hospital_department @relation(fields: [department_id], references: [id])
  wallet_transaction  wallet_transaction?
  services            use_service[]
}

model use_service {
  appointment    health_check_appointment @relation(fields: [appointment_id], references: [id])
  appointment_id Int

  service    medical_services @relation(fields: [service_id], references: [id])
  service_id Int

  doctor    doctors? @relation(fields: [doctor_id], references: [id])
  doctor_id Int?

  result_image String[]

  @@id([appointment_id, service_id])
}
